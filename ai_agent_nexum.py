import os
import json
from dotenv import load_dotenv
from google import genai
from google.genai import types
from typing import List, Dict

# --- Configura√ß√£o de Ambiente e Dados ---

# Tenta importar o servi√ßo real. Caso falhe, usa a conting√™ncia.
try:
    from Nexum_BackEnd_main.stock import service_generate_acquisition_suggestion as obter_sugestoes_compra
    _LIVE_DB_MODE = True
except ImportError:
    _LIVE_DB_MODE = False
    
    def obter_sugestoes_compra() -> List[Dict]:
        """Conting√™ncia de dados local."""
        # Se for para o Hackathon/Teste, √© crucial que este CSV esteja formatado corretamente.
        import pandas as pd
        CSV_PATH = "dados_hackathon.csv"
        MAX_CRITICOS = 5
        try:
            df = pd.read_csv(CSV_PATH, delimiter=';')
            
            # Rec√°lculo de 'quantidade_a_comprar' e filtro de cr√≠ticos
            df['quantidade_a_comprar'] = ((df['cmm'] * 2) - df['saldo_manut'] - df['provid_compras']).clip(lower=0)
            
            criticos = df[df['quantidade_a_comprar'] > 0].copy()
            
            # Mapeamento para o formato esperado pelo prompt do Gemini
            dados_sp = pd.DataFrame({
                'codigo': criticos['codigo'],
                'abc': criticos['abc'], # Mantido, mas n√£o usado pelo Gemini neste prompt
                'estoque_atual': criticos['saldo_manut'],
                # IMPORTANTE: Para a regra INVESTIGAR, √© bom incluir um estoque_maximo.
                # Como n√£o est√° no CSV, vou for√ßar um valor alto para itens A/B de alto CMM.
                'estoque_maximo': criticos.apply(lambda row: 500 if row['cmm'] > 0.8 else 100, axis=1), 
                'cmm': criticos['cmm'],
                'compras_em_andamento': criticos['provid_compras'],
                'quantidade_a_comprar': criticos['quantidade_a_comprar'],
            })
            
            # Prioriza os X com maior CMM
            return dados_sp.nlargest(MAX_CRITICOS, 'cmm').to_dict('records')
        except FileNotFoundError:
            print("ERRO: Arquivo dados_hackathon.csv n√£o encontrado.")
            return []


load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MODEL_NAME = "gemini-2.5-flash"

try:
    if not GEMINI_API_KEY:
        raise ValueError("Chave GEMINI_API_KEY n√£o encontrada no .env")
    client = genai.Client(api_key=GEMINI_API_KEY)
except Exception as e:
    print(f"ERRO DE CONFIGURA√á√ÉO: {e}")
    client = None

# --- Fun√ß√µes do Agente de IA ---

def percepcao_critica_db_call() -> List[Dict]:
    """Acessa o servi√ßo de aquisi√ß√£o ou conting√™ncia."""
    if _LIVE_DB_MODE:
        print("üì° PERCEP√á√ÉO: Chamando servi√ßo REAL do stock.py...")
    else:
        print("üì° PERCEP√á√ÉO: Executando conting√™ncia de dados...")
        
    return obter_sugestoes_compra()

def raciocinar_e_planejar_real(dados_criticos: List[Dict]) -> str:
    """Envia dados ao Gemini para gerar o plano de compra."""
    if not client:
        return json.dumps({"erro": "Cliente Gemini n√£o inicializado."})
    
    # Instru√ß√£o de sistema aprimorada para garantir a precis√£o da IA
    instrucao_sistema = """
Voc√™ √© o **Agente de Automa√ß√£o de Compras (AAC)** da Nexum, com total **autoridade** para emitir ordens de compra.
Sua √∫nica sa√≠da √© um **PLANO DE COMPRA** no formato JSON, conforme o schema.

### L√≥gica de Decis√£o Rigorosa
1. **Prioriza√ß√£o:** Analise e ordene os itens pelo maior **CMM**, depois pela maior **quantidade_a_comprar**.
2. **AC√ÉO FINAL:** Determine a a√ß√£o com base nos seguintes crit√©rios:
    * **'ENVIAR ORDEM DE COMPRA':** Se `quantidade_a_comprar` for maior que 0.
    * **'INVESTIGAR DEMANDA':** Se o `CMM` for **acima de 0.8** E o `estoque_atual` for **90% ou mais** do `estoque_maximo`.
    * **'MONITORAR':** Para todos os outros casos (onde n√£o h√° necessidade de compra).

### Formato de Sa√≠da (JSON Estruturado)
O JSON deve ser um array de objetos, onde cada objeto representa a a√ß√£o para um produto:

```json
[
  {
    "codigo": "[C√≥digo do item]",
    "acao_sugerida": "[AC√ÉO FINAL determinada]",
    "quantidade_acao": [quantidade_a_comprar, ou 0 se for INVESTIGAR/MONITORAR],
    "justificativa_curta": "[Coment√°rio: Compra, Alto CMM/Estoque, ou Monitorar.]"
  }
]
"""

    prompt_usuario = f"""
DADOS CR√çTICOS (JSON):
{json.dumps(dados_criticos, indent=2)}

Gere o plano de a√ß√£o rigoroso em JSON, listando os itens na ordem de prioridade.
"""
    
    # Esquema de sa√≠da simplificado e direto
    schema_saida = types.Schema(
        type=types.Type.ARRAY,
        description="Plano de a√ß√£o rigoroso e ordenado por prioridade (CMM > Quantidade).",
        items=types.Schema(
            type=types.Type.OBJECT,
            properties={
                "codigo": types.Schema(type=types.Type.STRING),
                "acao_sugerida": types.Schema(type=types.Type.STRING, description="A√ß√£o Final: ENVIAR ORDEM DE COMPRA, INVESTIGAR DEMANDA, ou MONITORAR."),
                "quantidade_acao": types.Schema(type=types.Type.NUMBER, description="A quantidade para a a√ß√£o (compra) ou 0."),
                "justificativa_curta": types.Schema(type=types.Type.STRING),
            }
        )
    )
    
    config = types.GenerateContentConfig(
        system_instruction=instrucao_sistema,
        response_mime_type="application/json",
        response_schema=schema_saida,
    )

    print("üß† RACIOC√çNIO: Enviando dados para o Agente de IA (Gemini)...")
    
    response = client.models.generate_content(
        model=MODEL_NAME, 
        contents=[prompt_usuario],
        config=config
    )
    
    print("‚úÖ RACIOC√çNIO CONCLU√çDO.")
    return response.text

def executar_plano_real(plano_json: str):
    """Processa a sa√≠da e simula a execu√ß√£o no ERP."""
    try:
        plano = json.loads(plano_json)
    except json.JSONDecodeError:
        print("\n‚ùå ERRO: A resposta do Agente n√£o √© um JSON v√°lido.")
        return

    print("\n==================================================")
    print("üöÄ A√á√ÉO EXECUTADA (Orquestra√ß√£o de Compras)")
    print("==================================================")
    
    if not plano:
        print("Nenhuma a√ß√£o a ser executada pelo plano.")
        return

    # O item de maior prioridade √© sempre o primeiro do array
    print(f"üì¢ Item de Maior Prioridade: {plano[0].get('codigo')}")
    print(f" ¬† A√ß√£o Priorit√°ria: {plano[0].get('acao_sugerida')}")
    print("--------------------------------------------------")

    for item in plano:
        codigo = item['codigo']
        acao = item['acao_sugerida'].upper()
        qtd = item['quantidade_acao']
        
        if "ENVIAR ORDEM DE COMPRA" in acao:
            print(f" ¬† [ORDEM CRIADA]: {codigo} -> QTD: {qtd:.0f} | Status: {acao}.")
        elif "INVESTIGAR" in acao:
            print(f" ¬† [ALERTA ENVIADO]: {codigo} -> Status: {acao}.")
        else:
            print(f" ¬† [MONITORAR]: {codigo} -> A√ß√£o: {acao}.")

    print("==================================================")
    print("‚úÖ CICLO DO AGENTE DE IA CONCLU√çDO.")
    print("==================================================")


if __name__ == "__main__":
    if not client:
        print("Agente de IA n√£o pode ser executado devido a erro de inicializa√ß√£o.")
    else:
        dados_criticos_reais = percepcao_critica_db_call()
        
        if dados_criticos_reais:
            plano_json_real = raciocinar_e_planejar_real(dados_criticos_reais)
            executar_plano_real(plano_json_real)
        else:
            print("Nenhuma sugest√£o de compra encontrada. O Agente n√£o gerou a√ß√µes.")