import pandas as pd
import numpy as np

# Carregar dados
df = pd.read_csv('dados_hackathon.csv', delimiter=';')

print("=" * 80)
print("üìä AN√ÅLISE DOS DADOS DE SUPPLY CHAIN")
print("=" * 80)

# Informa√ß√µes b√°sicas
print("\n1Ô∏è‚É£ INFORMA√á√ïES GERAIS:")
print(f"   Total de registros: {len(df)}")
print(f"   Total de colunas: {len(df.columns)}")
print(f"   Total de produtos √∫nicos: {df['codigo'].nunique()}")

# Estrutura das colunas
print("\n2Ô∏è‚É£ ESTRUTURA DAS COLUNAS:")
print(df.dtypes)

# Estat√≠sticas descritivas
print("\n3Ô∏è‚É£ ESTAT√çSTICAS DOS DADOS NUM√âRICOS:")
print(df.describe())

# An√°lise por classifica√ß√£o ABC
print("\n4Ô∏è‚É£ DISTRIBUI√á√ÉO POR CLASSIFICA√á√ÉO ABC:")
print(df['abc'].value_counts())
print(f"\n   A (Alto valor): {(df['abc'] == 'A').sum()} itens")
print(f"   B (M√©dio valor): {(df['abc'] == 'B').sum()} itens")
print(f"   C (Baixo valor): {(df['abc'] == 'C').sum()} itens")

# An√°lise por tipo
print("\n5Ô∏è‚É£ DISTRIBUI√á√ÉO POR TIPO:")
print(df['tipo'].value_counts())

# An√°lise de estoque
print("\n6Ô∏è‚É£ AN√ÅLISE DE ESTOQUE:")
print(f"   Saldo total em manuten√ß√£o: {df['saldo_manut'].sum()}")
print(f"   Produtos com estoque > 0: {(df['saldo_manut'] > 0).sum()}")
print(f"   Produtos com estoque = 0: {(df['saldo_manut'] == 0).sum()}")
print(f"   M√©dia de estoque: {df['saldo_manut'].mean():.2f}")
print(f"   Mediana de estoque: {df['saldo_manut'].median():.2f}")

# An√°lise de compras
print("\n7Ô∏è‚É£ AN√ÅLISE DE COMPRAS:")
print(f"   Total previsto em compras: {df['provid_compras'].sum()}")
print(f"   Produtos com compras previstas: {(df['provid_compras'] > 0).sum()}")
print(f"   Total em recebimento esperado: {df['recebimento_esperado'].sum()}")

# An√°lise de tr√¢nsito/movimenta√ß√£o
print("\n8Ô∏è‚É£ AN√ÅLISE DE MOVIMENTA√á√ÉO:")
print(f"   Em tr√¢nsito (manuten√ß√£o): {df['transito_manut'].sum()}")
print(f"   Em stage (manuten√ß√£o): {df['stage_manut'].sum()}")
print(f"   Em recep√ß√£o (manuten√ß√£o): {df['recepcao_manut'].sum()}")
print(f"   Pendente RI: {df['pendente_ri'].sum()}")

# An√°lise de pe√ßas em teste
print("\n9Ô∏è‚É£ AN√ÅLISE DE TESTES:")
print(f"   Pe√ßas em teste (kit): {df['pecas_teste_kit'].sum()}")
print(f"   Pe√ßas em teste: {df['pecas_teste'].sum()}")

# An√°lise de reparos
print("\nüîü AN√ÅLISE DE REPAROS:")
print(f"   Em fornecedor para reparo: {df['fornecedor_reparo'].sum()}")
print(f"   Em laborat√≥rio: {df['laboratorio'].sum()}")

# An√°lise WR (Work Request)
print("\n1Ô∏è‚É£1Ô∏è‚É£ AN√ÅLISE DE WR (Work Request):")
print(f"   Total WR: {df['wr'].sum()}")
print(f"   Total WRCR: {df['wrcr'].sum()}")
print(f"   Em stage WR: {df['stage_wr'].sum()}")

# An√°lise CMM e Coeficiente de Perda
print("\n1Ô∏è‚É£2Ô∏è‚É£ AN√ÅLISE DE CRITICIDADE:")
print(f"   CMM m√©dio: {df['cmm'].mean():.2f}")
print(f"   CMM m√°ximo: {df['cmm'].max():.2f}")
print(f"   Coeficiente de perda m√©dio: {df['coef_perda'].mean():.4f}")
print(f"   Produtos com coef_perda = 0: {(df['coef_perda'] == 0).sum()}")
print(f"   Produtos com coef_perda > 1: {(df['coef_perda'] > 1).sum()}")

# Identificar produtos cr√≠ticos (alto CMM + baixo estoque)
print("\n1Ô∏è‚É£3Ô∏è‚É£ PRODUTOS CR√çTICOS (CMM > 1 E ESTOQUE = 0):")
criticos = df[(df['cmm'] > 1) & (df['saldo_manut'] == 0)]
print(f"   Total: {len(criticos)} produtos")
if len(criticos) > 0:
    print("\n   Top 10 mais cr√≠ticos:")
    print(criticos.nlargest(10, 'cmm')[['codigo', 'abc', 'cmm', 'saldo_manut', 'provid_compras']])

# Produtos com alta demanda de compra
print("\n1Ô∏è‚É£4Ô∏è‚É£ PRODUTOS COM MAIOR DEMANDA DE COMPRA:")
print(df.nlargest(10, 'provid_compras')[['codigo', 'abc', 'tipo', 'saldo_manut', 'provid_compras']])

# An√°lise de valores nulos
print("\n1Ô∏è‚É£5Ô∏è‚É£ AN√ÅLISE DE DADOS FALTANTES:")
print(df.isnull().sum())

# Resumo do fluxo log√≠stico total
print("\n1Ô∏è‚É£6Ô∏è‚É£ RESUMO DO FLUXO LOG√çSTICO TOTAL:")
fluxo_total = {
    'Estoque Dispon√≠vel': df['saldo_manut'].sum(),
    'Compras Provisionadas': df['provid_compras'].sum(),
    'Recebimento Esperado': df['recebimento_esperado'].sum(),
    'Em Tr√¢nsito': df['transito_manut'].sum(),
    'Em Stage': df['stage_manut'].sum(),
    'Em Recep√ß√£o': df['recepcao_manut'].sum(),
    'Em Testes': df['pecas_teste_kit'].sum() + df['pecas_teste'].sum(),
    'Em Reparo': df['fornecedor_reparo'].sum() + df['laboratorio'].sum(),
    'WR Total': df['wr'].sum(),
}

for key, value in fluxo_total.items():
    print(f"   {key}: {value}")

print("\n" + "=" * 80)
print("‚úÖ AN√ÅLISE CONCLU√çDA!")
print("=" * 80)
